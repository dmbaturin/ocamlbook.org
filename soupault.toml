### Configuration file for the soupault website generator ###

## Global settings

[settings]
  soupault_version = "4.0.0"

  strict = true
  verbose = true
  debug = true

  # Where generated files go
  build_dir = "build"

  # Where page files are stored
  site_dir = "book/"

  # Where in the template the page content is inserted
  default_content_selector = "main"

  # There's a div for footnotes insite <main>,
  # so we want to insert the content before it
  default_content_action = "prepend_child"

  default_template_file = "templates/main.html"

  # Page considered the section index
  index_page = "index"

  # Leave *.html files unchanged for now.
  page_file_extensions = ["html", "md"]

  doctype = "<!DOCTYPE html>"

## Preprocessors
[preprocessors]
  md = "cmark --unsafe --smart"


[hooks.pre-process]
  lua_source = '''
    target_file_name = Sys.basename(target_file)

    target_page_dir = Sys.basename(target_dir)
    target_page_parent_dir = Sys.dirname(target_dir)

    target_page_dir = Regex.replace(target_page_dir, "^\\d+_", "")

    target_dir = Sys.join_path(target_page_parent_dir, target_page_dir)
    target_file = Sys.join_path(target_dir, target_file_name)

    Log.debug(format("Target file name set to \"%s\"", target_file))
'''

[hooks.post-index]
  lua_source = '''
    Log.debug("Extracting chapter number")
    page_file_name = Sys.basename(page_file)
    res = Regex.find_all(page_file_name, "^(\\d+)")

    if res then
      chapter_number = res[1]
    else
      chapter_number = 0
    end

    index_fields["chapter_number"] = format("%s", chapter_number)
    Log.debug(JSON.pretty_print(index_fields))
'''

[index]
  index = true

  # Make the index data available even to content pages,
  # at cost of making a reduced first pass to extract that data
  # before the "real" build
  index_first = true

  dump_json = "index.json"
  sort_by = "chapter_number"
  sort_type = "numeric"
  sort_descending = false

[index.fields]
  title = { selector = ["#title", "h1"] }

## Widgets

# Takes the content of the first <h1> and inserts it into the <title>
[widgets.page-title]
  widget = "title"
  selector = "h1"
  default = "OCaml From the Ground Up"
  append = " &mdash; OCaml From the Ground Up"

# Moves all elements with class="footnote" to <div id="footnotes"> 
# and replaces them with numbered links.
[widgets.footnotes]
  widget = "footnotes"
  selector = "div#footnotes"
  footnote_selector = ".footnote"
  footnote_link_class = "footnote"

[widgets.table-of-contents]
  exclude_page = "index.md"

  widget = "toc"
  selector = "h1"
  action = "insert_after"

  min_level = 2

  toc_list_class = "toc"
  toc_class_levels = false

  numbered_list = true

  heading_links = true
  heading_link_text = "â†’ "
  heading_link_class = "here"

  use_heading_slug = true

[widgets.insert-chapters-index]
  widget = "chapters-index"

  index_selector = "div#chapters-index"

  index_template = '''
    <ul class="toc">
      <li> <a href="/">About this book</a> </li>
      {% for e in entries %}
      <li> <a href="{{e.url}}">{{e.title}}</a> </li>
      {% endfor %}
    </ul>
'''

[widgets.cleanup-table-of-contents]
  widget = "delete_element"
  after  = "table-of-contents"

  selector = "div#toc"
  only_if_empty = true

[widgets.ocaml-compile]
  widget = "preprocess_element"
  selector = '.language-ocaml'
  command = 'cat > /tmp/code_sample_$PPID.ml && ocamlc -stop-after typing /tmp/code_sample_$PPID.ml'
  action = 'ignore_output'
  
 
# Runs the content of <* class="language-*"> elements through a syntax highlighter
[widgets.highlight-ocaml]
  after = "ocaml-compile"
  widget = "preprocess_element"
  selector = ['.language-ocaml']
  command = 'highlight -O html -f --syntax=ocaml'
  action = "replace_content"

[widgets.highlight-bad-ocaml]
  after = "ocaml-compile"
  widget = "preprocess_element"
  selector = '.language-invalid-ocaml'
  command = 'highlight -O html -f --syntax=ocaml'
  action = "replace_content"
